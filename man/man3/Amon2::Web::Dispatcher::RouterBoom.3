.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Amon2::Web::Dispatcher::RouterBoom 3"
.TH Amon2::Web::Dispatcher::RouterBoom 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Amon2::Web::Dispatcher::RouterBoom \- Router::Boom bindings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyApp2::Web::Dispatcher;
\&    use Amon2::Web::Dispatcher::RouterBoom;
\&
\&    base \*(AqMyApp::Web::C\*(Aq;
\&
\&    get \*(Aq/\*(Aq => \*(AqFoo#bar\*(Aq;
\&
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a router class for Amon2. It's based on Router::Boom.
.SH "DSL FUNCTIONS"
.IX Header "DSL FUNCTIONS"
.ie n .IP """get($path:Str, $destnation:Str)""" 4
.el .IP "\f(CWget($path:Str, $destnation:Str)\fR" 4
.IX Item "get($path:Str, $destnation:Str)"
.PD 0
.ie n .IP """post($path:Str, $destnation:Str)""" 4
.el .IP "\f(CWpost($path:Str, $destnation:Str)\fR" 4
.IX Item "post($path:Str, $destnation:Str)"
.ie n .IP """delete_($path:Str, $destnation:Str)""" 4
.el .IP "\f(CWdelete_($path:Str, $destnation:Str)\fR" 4
.IX Item "delete_($path:Str, $destnation:Str)"
.ie n .IP """any($path:Str, $destnation:Str)""" 4
.el .IP "\f(CWany($path:Str, $destnation:Str)\fR" 4
.IX Item "any($path:Str, $destnation:Str)"
.PD
.Vb 5
\&    get  \*(Aq/\*(Aq => \*(AqRoot#index\*(Aq;
\&    get  \*(Aq/:user\*(Aq => \*(AqUser#show\*(Aq;
\&    any  \*(Aq/:user/update\*(Aq => \*(AqUser#update\*(Aq;
\&    post \*(Aq/:user/blog/post\*(Aq => \*(AqBlog#post\*(Aq;
\&    delete_ \*(Aq/:user/blog/:id\*(Aq => \*(AqBlog#remove\*(Aq;
.Ve
.Sp
Add routes by \s-1DSL\s0. First argument is the path pattern in Path::Boom rules.
Second argument is the destination method path.
.Sp
Destination method pass is \f(CW\*(C`${class}#${method}\*(C'\fR form.
.Sp
The path declared with \fIget()\fR accepts \s-1GET\s0 and \s-1HEAD\s0.
The path declared with \fIpost()\fR accepts \s-1POST\s0 method.
The path declared with \fIdelete_()\fR accepts \s-1DELETE\s0 method.
The path declared with \fIany()\fR accepts any methods.
.ie n .IP """base($klass:Str)""" 4
.el .IP "\f(CWbase($klass:Str)\fR" 4
.IX Item "base($klass:Str)"
.Vb 1
\&    base \*(AqMy::App::Web::C\*(Aq;
.Ve
.Sp
You can specify the base class name for 'Root#index' style definition.
.Sp
If you are write your dispatcher in following code, then the method for '/' is \f(CW\*(C`My::App::Web::C::Root\->index\*(C'\fR.
.Sp
.Vb 2
\&    base \*(AqMy::App::Web::C\*(Aq;
\&    get \*(Aq/\*(Aq => \*(AqRoot#index\*(Aq;
.Ve
.ie n .IP """get($path:Str, $destnation:CodeRef)""" 4
.el .IP "\f(CWget($path:Str, $destnation:CodeRef)\fR" 4
.IX Item "get($path:Str, $destnation:CodeRef)"
.PD 0
.ie n .IP """post($path:Str, $destnation:CodeRef)""" 4
.el .IP "\f(CWpost($path:Str, $destnation:CodeRef)\fR" 4
.IX Item "post($path:Str, $destnation:CodeRef)"
.ie n .IP """delete_($path:Str, $destnation:CodeRef)""" 4
.el .IP "\f(CWdelete_($path:Str, $destnation:CodeRef)\fR" 4
.IX Item "delete_($path:Str, $destnation:CodeRef)"
.ie n .IP """any($path:Str, $destnation:CodeRef)""" 4
.el .IP "\f(CWany($path:Str, $destnation:CodeRef)\fR" 4
.IX Item "any($path:Str, $destnation:CodeRef)"
.PD
.Vb 12
\&    get  \*(Aq/\*(Aq => sub {
\&        my ($c) = @_;
\&        ...
\&    };
\&    get  \*(Aq/:user\*(Aq => sub {
\&        my ($c, $args) = @_;
\&        $c\->render(
\&            \*(Aquser.tx\*(Aq => {
\&                user => $args\->{user},
\&            },
\&        );
\&    };
.Ve
.Sp
Add routes by \s-1DSL\s0. First argument is the path pattern in Path::Boom rules.
Second argument is the destination code.
.Sp
Callback function's first argument is the context object. Second is the captured values from the router.
.SH "ROUTING RULES"
.IX Header "ROUTING RULES"
Router::Boom's routing rule is really flexible. You can embed regexp in your rule.
.ie n .IP """/foo/bar""" 4
.el .IP "\f(CW/foo/bar\fR" 4
.IX Item "/foo/bar"
String literal matches strings.
.ie n .IP """/:foo""" 4
.el .IP "\f(CW/:foo\fR" 4
.IX Item "/:foo"
\&\f(CW\*(C`:foo\*(C'\fR matches \f(CW\*(C`qr{[^/]}\*(C'\fR. It's captured.
.ie n .IP """/{foo}""" 4
.el .IP "\f(CW/{foo}\fR" 4
.IX Item "/{foo}"
\&\f(CW\*(C`{foo}\*(C'\fR is same as \f(CW\*(C`:foo\*(C'\fR.
.ie n .IP """/{foo:.*}""" 4
.el .IP "\f(CW/{foo:.*}\fR" 4
.IX Item "/{foo:.*}"
You can use the custom regexp for capturing.
.ie n .IP """/*""" 4
.el .IP "\f(CW/*\fR" 4
.IX Item "/*"
\&\f(CW\*(C`*\*(C'\fR is same as \f(CW\*(C`{*:.*}\*(C'\fR.
.SH "EXCEPTION HANDLER"
.IX Header "EXCEPTION HANDLER"
You can customize the exception handler. You can define the special named method 'handle_exception'.
.PP
.Vb 1
\&    package MyApp::Web::Dispatcher;
\&
\&    sub handle_exception {
\&        my ($class, $c, $e) = @_;
\&
\&        if (UNIVERSAL::isa($e, \*(AqMy::Exception::Validation\*(Aq)) {
\&            return $c\->create_simple_status_page(400, \*(AqBad Request\*(Aq);
\&        } else {
\&            return $c\->res_500();
\&        }
\&    }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Amon2
