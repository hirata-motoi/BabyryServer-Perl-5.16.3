.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Minimal 3"
.TH Log::Minimal 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Minimal \- Minimal but customizable logger.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Log::Minimal;
\&
\&  critf("%s","foo"); # 2010\-10\-20T00:25:17 [CRITICAL] foo at example.pl line 12
\&  warnf("%d %s %s", 1, "foo", $uri);
\&  infof(\*(Aqfoo\*(Aq);
\&  debugf("foo"); print if $ENV{LM_DEBUG} is true
\&
\&  # with full stack trace
\&  critff("%s","foo");
\&  # 2010\-10\-20T00:25:17 [CRITICAL] foo at lib/Example.pm line 10, example.pl line 12
\&  warnff("%d %s %s", 1, "foo", $uri);
\&  infoff(\*(Aqfoo\*(Aq);
\&  debugff("foo"); print if $ENV{LM_DEBUG} is true
\&
\&  my $serialize = ddf({ \*(Aqkey\*(Aq => \*(Aqvalue\*(Aq });
\&
\&  # die with formatted message
\&  croakf(\*(Aqfoo\*(Aq);
\&  croakff(\*(Aq%s %s\*(Aq, $code, $message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Log::Minimal is Minimal but customizable log module.
.SH "EXPORT FUNCTIONS"
.IX Header "EXPORT FUNCTIONS"
.IP "critf(($message:Str|$format:Str,@list:Array));" 4
.IX Item "critf(($message:Str|$format:Str,@list:Array));"
.Vb 2
\&  critf("could\*(Aqt connect to example.com");
\&  critf("Connection timeout timeout:%d, host:%s", 2, "example.com");
.Ve
.Sp
Display \s-1CRITICAL\s0 messages.
When two or more arguments are passed to the function, 
the first argument is treated as a format of printf.
.Sp
.Vb 3
\&  local $Log::Minimal::AUTODUMP = 1;
\&  critf({ foo => \*(Aqbar\*(Aq });
\&  critf("dump is %s", { foo => \*(Aqbar\*(Aq });
.Ve
.Sp
If \f(CW$Log::Minimal::AUTODUMP\fR is true, reference or object message is serialized with 
Data::Dumper automatically.
.IP "warnf(($message:Str|$format:Str,@list:Array));" 4
.IX Item "warnf(($message:Str|$format:Str,@list:Array));"
Display \s-1WARN\s0 messages.
.IP "infof(($message:Str|$format:Str,@list:Array));" 4
.IX Item "infof(($message:Str|$format:Str,@list:Array));"
Display \s-1INFO\s0 messages.
.IP "debugf(($message:Str|$format:Str,@list:Array));" 4
.IX Item "debugf(($message:Str|$format:Str,@list:Array));"
Display \s-1DEBUG\s0 messages, if \f(CW$ENV\fR{\s-1LM_DEBUG\s0} is true.
.IP "critff(($message:Str|$format:Str,@list:Array));" 4
.IX Item "critff(($message:Str|$format:Str,@list:Array));"
.Vb 2
\&  critff("could\*(Aqt connect to example.com");
\&  critff("Connection timeout timeout:%d, host:%s", 2, "example.com");
.Ve
.Sp
Display \s-1CRITICAL\s0 messages with stack trace.
.IP "warnff(($message:Str|$format:Str,@list:Array));" 4
.IX Item "warnff(($message:Str|$format:Str,@list:Array));"
Display \s-1WARN\s0 messages with stack trace.
.IP "infoff(($message:Str|$format:Str,@list:Array));" 4
.IX Item "infoff(($message:Str|$format:Str,@list:Array));"
Display \s-1INFO\s0 messages with stack trace.
.IP "debugff(($message:Str|$format:Str,@list:Array));" 4
.IX Item "debugff(($message:Str|$format:Str,@list:Array));"
Display \s-1DEBUG\s0 messages with stack trace, if \f(CW$ENV\fR{\s-1LM_DEBUG\s0} is true.
.IP "croakf(($message:Str|$format:Str,@list:Array));" 4
.IX Item "croakf(($message:Str|$format:Str,@list:Array));"
die with formatted \f(CW$message\fR
.Sp
.Vb 2
\&  croakf("critical error");
\&  # 2011\-06\-10T16:27:26 [ERROR] critical error at sample.pl line 23
.Ve
.IP "croakff(($message:Str|$format:Str,@list:Array));" 4
.IX Item "croakff(($message:Str|$format:Str,@list:Array));"
die with formatted \f(CW$message\fR with stack trace
.IP "ddf($value:Any)" 4
.IX Item "ddf($value:Any)"
Utility method that serializes given value with Data::Dumper;
.Sp
.Vb 1
\& my $serialize = ddf($hashref);
.Ve
.SH "ENVIRONMENT VALUE"
.IX Header "ENVIRONMENT VALUE"
.ie n .IP "$ENV{\s-1LM_DEBUG\s0}" 4
.el .IP "\f(CW$ENV\fR{\s-1LM_DEBUG\s0}" 4
.IX Item "$ENV{LM_DEBUG}"
To print debugf and debugff messages, \f(CW$ENV\fR{\s-1LM_DEBUG\s0} must be true.
.Sp
You can change variable name from \s-1LM_DEBUG\s0 to arbitrary string which is specified by \*(L"env_debug\*(R" in use line. Changed variable name affects only in package locally.
.Sp
.Vb 1
\&  use Log::Minimal env_debug => \*(AqFOO_DEBUG\*(Aq;
\&  
\&  $ENV{LM_DEBUG}  = 1;
\&  $ENV{FOO_DEBUG} = 0;
\&  debugf("hello"); # no output
\&  
\&  $ENV{FOO_DEBUG} = 1;
\&  debugf("world"); # print message
.Ve
.ie n .IP "$ENV{\s-1LM_COLOR\s0}" 4
.el .IP "\f(CW$ENV\fR{\s-1LM_COLOR\s0}" 4
.IX Item "$ENV{LM_COLOR}"
\&\f(CW$ENV\fR{\s-1LM_COLOR\s0} is used as default value of \f(CW$Log::Minimal::COLOR\fR
.ie n .IP "$ENV{\s-1LM_DEFAULT_COLOR\s0}" 4
.el .IP "\f(CW$ENV\fR{\s-1LM_DEFAULT_COLOR\s0}" 4
.IX Item "$ENV{LM_DEFAULT_COLOR}"
\&\f(CW$ENV\fR{\s-1LM_DEFAULT_COLOR\s0} is used as default value of \f(CW$Log::Minimal::DEFAULT_COLOR\fR
.Sp
Format of value is \*(L"LEVEL=FG;BG:LEVEL=FG;BG:...\*(R". \*(L"\s-1FG\s0\*(R" and \*(L"\s-1BG\s0\*(R" are optional.
.Sp
For example:
.Sp
.Vb 1
\&  export LM_DEFAULT_COLOR=\*(Aqdebug=red:info=;cyan:critical=yellow;red\*(Aq
.Ve
.SH "CUSTOMIZE"
.IX Header "CUSTOMIZE"
.ie n .IP "$Log::Minimal::COLOR" 4
.el .IP "\f(CW$Log::Minimal::COLOR\fR" 4
.IX Item "$Log::Minimal::COLOR"
Coloring log messages. Disabled by default.
.ie n .IP "$Log::Minimal::PRINT" 4
.el .IP "\f(CW$Log::Minimal::PRINT\fR" 4
.IX Item "$Log::Minimal::PRINT"
To change the method of outputting the log, set \f(CW$Log::Minimal::PRINT\fR.
.Sp
.Vb 10
\&  # with PSGI Application. output log with request uri.
\&  my $app = sub {
\&      my $env = shift;
\&      local $Log::Minimal::PRINT = sub {
\&          my ( $time, $type, $message, $trace,$raw_message) = @_;
\&          $env\->{psgi.errors}\->print(
\&              "$time [$env\->{SCRIPT_NAME}] [$type] $message at $trace\en");
\&      };
\&      run_app(...);
\&  }
.Ve
.Sp
\&\f(CW$message\fR includes color sequences, If you want raw message text, use \f(CW$raw_message\fR.
default is
.Sp
.Vb 4
\&  sub {
\&    my ( $time, $type, $message, $trace,$raw_message) = @_;
\&    warn "$time [$type] $message at $trace\en";
\&  }
.Ve
.ie n .IP "$Log::Minimal::DIE" 4
.el .IP "\f(CW$Log::Minimal::DIE\fR" 4
.IX Item "$Log::Minimal::DIE"
To change the format of die message, set \f(CW$Log::Minimal::DIE\fR.
.Sp
.Vb 4
\&  local $Log::Minimal::PRINT = sub {
\&      my ( $time, $type, $message, $trace) = @_;
\&      die "[$type] $message at $trace\en"; # not need time
\&  };
.Ve
.Sp
default is
.Sp
.Vb 4
\&  sub {
\&    my ( $time, $type, $message, $trace) = @_;
\&    die "$time [$type] $message at $trace\en";
\&  }
.Ve
.ie n .IP "$Log::Minimal::LOG_LEVEL" 4
.el .IP "\f(CW$Log::Minimal::LOG_LEVEL\fR" 4
.IX Item "$Log::Minimal::LOG_LEVEL"
Set level to output log.
.Sp
.Vb 3
\&  local $Log::Minimal::LOG_LEVEL = "WARN";
\&  infof("foo"); #print nothing
\&  warnf("foo");
.Ve
.Sp
Support levels are \s-1DEBUG\s0,INFO,WARN,CRITICAL and \s-1NONE\s0.
If \s-1NONE\s0 is set, no output except croakf and croakff. Default log level is \s-1DEBUG\s0.
.ie n .IP "$Log::Minimal::AUTODUMP" 4
.el .IP "\f(CW$Log::Minimal::AUTODUMP\fR" 4
.IX Item "$Log::Minimal::AUTODUMP"
Serialize message with Data::Dumper.
.Sp
.Vb 1
\&  warnf("%s",{ foo => bar}); # HASH(0x100804ed0)
\&
\&  local $Log::Minimal::AUTODUMP = 1;
\&  warnf("dump is %s", {foo=>\*(Aqbar\*(Aq}); #dump is {foo=>\*(Aqbar\*(Aq}
\&
\&  my $uri = URI\->new("http://search.cpan.org/");
\&  warnf("uri: \*(Aq%s\*(Aq", $uri); # uri: \*(Aqhttp://search.cpan.org/\*(Aq
.Ve
.Sp
If message is object and has overload methods like '""' or '0+', 
Log::Minimal uses it instead of Data::Dumper.
.ie n .IP "$Log::Minimal::TRACE_LEVEL" 4
.el .IP "\f(CW$Log::Minimal::TRACE_LEVEL\fR" 4
.IX Item "$Log::Minimal::TRACE_LEVEL"
Like a \f(CW$Carp::CarpLevel\fR, this variable determines how many additional call frames are to be skipped.
Defaults to 0.
.ie n .IP "$Log::Minimal::ESCAPE_WHITESPACE" 4
.el .IP "\f(CW$Log::Minimal::ESCAPE_WHITESPACE\fR" 4
.IX Item "$Log::Minimal::ESCAPE_WHITESPACE"
If this value is true, whitespace other than space will be represented as [\en\et\er].
Defaults to 0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo {at} gmail.com>
.SH "THANKS TO"
.IX Header "THANKS TO"
Yuji Shimada (xaicron)
.PP
Yoshihiro Sugi (sugyan)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
