.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::TransactionManager 3"
.TH DBIx::TransactionManager 3 "2013-02-15" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::TransactionManager \- Transaction handling for database.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1RAII\s0 style transaction management:
.PP
.Vb 4
\&    use DBI;
\&    use DBIx::TransactionManager;
\&    my $dbh = DBI\->connect(\*(Aqdbi:SQLite:\*(Aq);
\&    my $tm = DBIx::TransactionManager\->new($dbh);
\&    
\&    # create transaction object
\&    my $txn = $tm\->txn_scope;
\&    
\&        # execute query
\&        $dbh\->do("insert into foo (id, var) values (1,\*(Aqbaz\*(Aq)");
\&        # And you can do multiple database operations here
\&    
\&    # and commit it.
\&    $txn\->commit;
.Ve
.PP
Nested transaction usage:
.PP
.Vb 4
\&    use DBI;
\&    use DBIx::TransactionManager;
\&    my $dbh = DBI\->connect(\*(Aqdbi:SQLite:\*(Aq);
\&    my $tm = DBIx::TransactionManager\->new($dbh);
\&    
\&    {
\&        my $txn = $tm\->txn_scope;
\&        $dbh\->do("insert into foo (id, var) values (1,\*(Aqbaz\*(Aq)");
\&        {
\&            my $txn2 = $tm\->txn_scope;
\&            $dbh\->do("insert into foo (id, var) values (2,\*(Aqbab\*(Aq)");
\&            $txn2\->commit;
\&        }
\&        {
\&            my $txn3 = $tm\->txn_scope;
\&            $dbh\->do("insert into foo (id, var) values (3,\*(Aqbee\*(Aq)");
\&            $txn3\->commit;
\&        }
\&        $txn\->commit;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::TransactionManager is a simple transaction manager.
like DBIx::Class::Storage::TxnScopeGuard.
.PP
This module provides two futures.
.IP "\s-1RAII\s0 based transaction management" 4
.IX Item "RAII based transaction management"
.PD 0
.IP "Nested transaction management" 4
.IX Item "Nested transaction management"
.PD
.PP
If you are writing of DBIx::* or O/R Mapper, see DBIx::TransactionManager::Developers.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $tm = DBIx::TransactionManager\->new($dbh)" 4
.el .IP "my \f(CW$tm\fR = DBIx::TransactionManager\->new($dbh)" 4
.IX Item "my $tm = DBIx::TransactionManager->new($dbh)"
Creating an instance of this class.
\&\f(CW$dbh\fR is required.
.ie n .IP "my $txn = $tm\->txn_scope(%args)" 4
.el .IP "my \f(CW$txn\fR = \f(CW$tm\fR\->txn_scope(%args)" 4
.IX Item "my $txn = $tm->txn_scope(%args)"
Get DBIx::TransactionManager::ScopeGuard's instance object.
.Sp
Options for this method is only for module creators, see DBIx::TransactionManager::Developers.
.SH "DBIx::TransactionManager::ScopeGuard's METHODS"
.IX Header "DBIx::TransactionManager::ScopeGuard's METHODS"
.ie n .IP "$txn\->\fIcommit()\fR" 4
.el .IP "\f(CW$txn\fR\->\fIcommit()\fR" 4
.IX Item "$txn->commit()"
Commit the transaction.
.Sp
If the \f(CW$tm\fR is in a nested transaction, TransactionManager doesn't do \s-1COMMIT\s0 at here. \s-1TM\s0 just poped transaction stack and do nothing.
.ie n .IP "$txn\->\fIrollback()\fR" 4
.el .IP "\f(CW$txn\fR\->\fIrollback()\fR" 4
.IX Item "$txn->rollback()"
Rollback the transaction.
.Sp
If the \f(CW$tm\fR is in a nested transaction, TransactionManager doesn't do \s-1ROLLBACK\s0 at here. \s-1TM\s0 just poped transaction stack and do nothing.
.SH "DBIx::TransactionManager and other transaction managers"
.IX Header "DBIx::TransactionManager and other transaction managers"
You \fBcannot\fR use other transaction manager and DBIx::TransactionManager at once.
.PP
If you are using O/R mapper, you should use that's transaction management feature.
.SH "AUTHOR"
.IX Header "AUTHOR"
Atsushi Kobayashi <nekokak _at_ gmail _dot_ com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Storage::TxnScopeGuard
.PP
DBIx::Skinny::Transaction
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
