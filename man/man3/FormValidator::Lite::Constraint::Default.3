.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FormValidator::Lite::Constraint::Default 3"
.TH FormValidator::Lite::Constraint::Default 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FormValidator::Lite::Constraint::Default \- default constraint rules
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides default constraint rules for FormValidator::Lite.
.SH "CONSTRAINTS"
.IX Header "CONSTRAINTS"
.IP "\s-1NOT_NULL\s0" 4
.IX Item "NOT_NULL"
The parameter is true value or not.
.IP "\s-1NOT_BLANK\s0, \s-1REQUIRED\s0" 4
.IX Item "NOT_BLANK, REQUIRED"
Synonym of \s-1NOT_NULL\s0.
.IP "\s-1INT\s0" 4
.IX Item "INT"
The parameter looks like a integer? i.e. It matches /^[+\e\-]?[0\-9]+$/?
.IP "\s-1UINT\s0" 4
.IX Item "UINT"
The parameter looks like a unsigned integer? i.e. It matches /^[0\-9]+$/?
.IP "\s-1ASCII\s0" 4
.IX Item "ASCII"
.Vb 1
\&    $_ =~ /^[\ex21\-\ex7E]+$/
.Ve
.Sp
The parameter is just \s-1ASCII\s0?
.IP "\s-1DUPLICATION\s0" 4
.IX Item "DUPLICATION"
.Vb 3
\&    $validator\->check(
\&        {mails => [qw/mail1 mail2/]} => [\*(AqDUPLICATION\*(Aq]
\&    );
.Ve
.Sp
The two parameters have same value?
.IP "\s-1DUP\s0" 4
.IX Item "DUP"
Synonym of \s-1DUPLICATION\s0.
.IP "\s-1LENGTH\s0" 4
.IX Item "LENGTH"
.Vb 4
\&    $validator\->check(
\&        name     => [[qw/LENGTH 5 20/]],
\&        password => [[qw/LENGTH 5/]],
\&    );
.Ve
.Sp
Check the length of data. First argument means \f(CW$minumum\fR value, second argument is \f(CW$max\fR.
\&\f(CW$max\fR is optional.
.IP "\s-1EQUAL\s0" 4
.IX Item "EQUAL"
.Vb 3
\&    $validator\->check(
\&        name => [[EQUAL => "foo"]],
\&    );
.Ve
.Sp
Check parameter match the argument or not.
.IP "\s-1REGEX\s0" 4
.IX Item "REGEX"
.Vb 3
\&    $validator\->check(
\&        name => [[REGEXP => qr/^[0\-9]$/]],
\&    );
.Ve
.Sp
Check regexp matches parameter or not.
.IP "\s-1REGEXP\s0" 4
.IX Item "REGEXP"
Synonym of \s-1REGEX\s0.
.IP "\s-1CHOICE\s0" 4
.IX Item "CHOICE"
.Vb 3
\&    $validator\->check(
\&        sex => [[CHOICE => qw/male female/]]
\&    );
.Ve
.Sp
The parameter is one of choice or not.
.IP "\s-1IN\s0" 4
.IX Item "IN"
Synonym of \s-1CHOICE\s0.
.IP "\s-1NOT_IN\s0" 4
.IX Item "NOT_IN"
.Vb 3
\&    $validator\->check(
\&        new_user => [[NOT_IN => \e@existing_users]]
\&    );
.Ve
.Sp
The parameter does not belong to the list of values.
.IP "\s-1MATCH\s0" 4
.IX Item "MATCH"
.Vb 1
\&    use MyApp::Util qw/is_foo/;
\&
\&    $validator\->check(
\&        foo => [[MATCH => \e&is_foo ]],
\&        bar => [[MATCH => sub { $_[0] eq \*(Aqfoo\*(Aq } ]],
\&    );
.Ve
.Sp
Check parameter using callback. Callback takes parameter as first argument,
should return true/false.
.IP "\s-1FILTER\s0" 4
.IX Item "FILTER"
.Vb 4
\&    $validator\->check(
\&        foo => [[FILTER => \*(Aqtrim\*(Aq], \*(AqINT\*(Aq],
\&        bar => [[FILTER => sub { $_[0] . \*(Aq@example.com\*(Aq } ], \*(AqEMAIL\*(Aq],
\&    );
.Ve
.Sp
\&\s-1FILTER\s0 is special constraint. It does not check the value and simply filter.
\&\*(L"trim\*(R" is only pre-defined. You can also pass a callback.
Callback takes parameter as first argument, should return filtered value.
