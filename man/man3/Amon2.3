.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Amon2 3"
.TH Amon2 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Amon2 \- lightweight web application framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    package MyApp;
\&    use parent qw/Amon2/;
\&    use Amon2::Config::Simple;
\&    sub load_config { Amon2::Config::Simple\->load(shift) }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Amon2 is simple, readable, extensible, \fB\s-1STABLE\s0\fR, \fB\s-1FAST\s0\fR web application framework based on Plack.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "\s-1CLASS\s0 \s-1METHODS\s0 for ""Amon2"" class"
.el .SS "\s-1CLASS\s0 \s-1METHODS\s0 for \f(CWAmon2\fP class"
.IX Subsection "CLASS METHODS for Amon2 class"
.ie n .IP "my $c = MyApp\->\fIcontext()\fR;" 4
.el .IP "my \f(CW$c\fR = MyApp\->\fIcontext()\fR;" 4
.IX Item "my $c = MyApp->context();"
Get the context object.
.IP "MyApp\->set_context($c)" 4
.IX Item "MyApp->set_context($c)"
Set your context object(\s-1INTERNAL\s0 \s-1USE\s0 \s-1ONLY\s0).
.SH "CLASS METHODS for inherited class"
.IX Header "CLASS METHODS for inherited class"
.ie n .IP """MyApp\->config()""" 4
.el .IP "\f(CWMyApp\->config()\fR" 4
.IX Item "MyApp->config()"
This method returns configuration information. It is generated by \f(CW\*(C`MyApp\->load_config()\*(C'\fR.
.ie n .IP """MyApp\->mode_name()""" 4
.el .IP "\f(CWMyApp\->mode_name()\fR" 4
.IX Item "MyApp->mode_name()"
This is a mode name for Amon2. The default implementation of this method is:
.Sp
.Vb 1
\&    sub mode_name { $ENV{PLACK_ENV} }
.Ve
.Sp
You can override this method if you want to determine the mode by other method.
.ie n .IP """MyApp\->new()""" 4
.el .IP "\f(CWMyApp\->new()\fR" 4
.IX Item "MyApp->new()"
Create new context object.
.ie n .IP """MyApp\->bootstrap()""" 4
.el .IP "\f(CWMyApp\->bootstrap()\fR" 4
.IX Item "MyApp->bootstrap()"
.Vb 1
\&    my $c = MyApp\->bootstrap();
.Ve
.Sp
Create new context object and set it to global context. When you are writing \s-1CLI\s0 script, setup the global context object by this method.
.ie n .IP """MyApp\->base_dir()""" 4
.el .IP "\f(CWMyApp\->base_dir()\fR" 4
.IX Item "MyApp->base_dir()"
This method returns the application base directory.
.ie n .IP """MyApp\->load_plugin($module_name[, \e%config])""" 4
.el .IP "\f(CWMyApp\->load_plugin($module_name[, \e%config])\fR" 4
.IX Item "MyApp->load_plugin($module_name[, %config])"
This method loads the plugin for the application.
.Sp
\&\fI\f(CI$module_name\fI\fR package name of the plugin. You can write it as two form like DBIx::Class:
.Sp
.Vb 1
\&    _\|_PACKAGE_\|_\->load_plugin("Web::CSRFDefender");    # => loads Amon2::Plugin::Web::CSRFDefender
.Ve
.Sp
If you want to load a plugin in your own name space, use the '+' character before a package name, like following:
    _\|_PACKAGE_\|_\->load_plugin(\*(L"+MyApp::Plugin::Foo\*(R"); # => loads MyApp::Plugin::Foo
.ie n .IP """MyApp\->load_plugins($module_name[, \e%config ], ...)""" 4
.el .IP "\f(CWMyApp\->load_plugins($module_name[, \e%config ], ...)\fR" 4
.IX Item "MyApp->load_plugins($module_name[, %config ], ...)"
Load multiple plugins at one time.
.Sp
If you want to load a plugin in your own name space, use the '+' character before a package name like following:
.Sp
.Vb 1
\&    _\|_PACKAGE_\|_\->load_plugins("+MyApp::Plugin::Foo"); # => loads MyApp::Plugin::Foo
.Ve
.ie n .IP """MyApp\->load_config()""" 4
.el .IP "\f(CWMyApp\->load_config()\fR" 4
.IX Item "MyApp->load_config()"
You can get a configuration hashref from \f(CW\*(C`config/$ENV{PLACK_ENV}.pl\*(C'\fR. You can override this method for customizing configuration loading method.
.ie n .IP """MyApp\->add_config()""" 4
.el .IP "\f(CWMyApp\->add_config()\fR" 4
.IX Item "MyApp->add_config()"
\&\s-1DEPRECATED\s0.
.ie n .IP """MyApp\->debug_mode()""" 4
.el .IP "\f(CWMyApp\->debug_mode()\fR" 4
.IX Item "MyApp->debug_mode()"
\&\fB((\s-1EXPERIMENTAL\s0))\fR
.Sp
This method returns a boolean value. It returns true when \f(CW$ENV\fR{\s-1AMON2_DEBUG\s0} is true value, false otherwise.
.Sp
You can override this method if you need.
.SH "PROJECT LOCAL MODE"
.IX Header "PROJECT LOCAL MODE"
\&\fB\s-1THIS\s0 \s-1MODE\s0 \s-1IS\s0 \s-1HIGHLY\s0 \s-1EXPERIMENTAL\s0\fR
.PP
Normally, Amon2's context is stored in a global variable.
.PP
This module makes the context to project local.
.PP
It means, normally context class using Amon2 use \f(CW$Amon2::CONTEXT\fR in each project, but context class using \*(L"\s-1PROJECT\s0 \s-1LOCAL\s0 \s-1MODE\s0\*(R" use \f(CW$MyApp::CONTEXT\fR.
.PP
\&\fBIt means you can't use code depend \f(CB\*(C`<Amon2\-\*(C'\fBcontext>> and \f(CB\*(C`<Amon2\-\*(C'\fBcontext>> under this mode.\fR>
.SS "\s-1NOTES\s0 \s-1ABOUT\s0 create_request"
.IX Subsection "NOTES ABOUT create_request"
Older Amon2::Web::Request has only 1 argument like following, it uses \f(CW\*(C`Amon2\->context\*(C'\fR to get encoding:
.PP
.Vb 4
\&    sub create_request {
\&        my ($class, $env) = @_;
\&        Amon2::Web::Request\->new($env);
\&    }
.Ve
.PP
If you want to use \*(L"\s-1PROJECT\s0 \s-1LOCAL\s0 \s-1MODE\s0\*(R", you need to pass class name of context class, as following:
.PP
.Vb 4
\&    sub create_request {
\&        my ($class, $env) = @_;
\&        Amon2::Web::Request\->new($env, $class);
\&    }
.Ve
.SS "\s-1HOW\s0 \s-1DO\s0 I \s-1ENABLE\s0 \s-1PROJECT\s0 \s-1LOCAL\s0 \s-1MODE\s0?"
.IX Subsection "HOW DO I ENABLE PROJECT LOCAL MODE?"
\&\f(CW\*(C` MyApp\-\*(C'\fR\fImake_local_context()\fR > turns on the project local mode.
.PP
There is no way to revert it, thanks.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
This module inserts 3 methods to your context class.
.IP "MyApp\->\fIcontext()\fR" 4
.IX Item "MyApp->context()"
Shorthand for \f(CW$MyApp::CONTEXT\fR
.IP "MyApp\->set_context($context)" 4
.IX Item "MyApp->set_context($context)"
It's the same as:
.Sp
.Vb 1
\&    $MyApp::CONTEXT = $context
.Ve
.ie n .IP "my $guard = MyApp\->\fIcontext_guard()\fR" 4
.el .IP "my \f(CW$guard\fR = MyApp\->\fIcontext_guard()\fR" 4
.IX Item "my $guard = MyApp->context_guard()"
Create new context guard class.
.Sp
It's the same as:
.Sp
.Vb 1
\&    Amon2::ContextGuard\->new(shift, \e$MyApp::CONTEXT);
.Ve
.SH "DOCUMENTS"
.IX Header "DOCUMENTS"
More complicated documents are available on <http://amon.64p.org/>
.SH "SUPPORTS"
.IX Header "SUPPORTS"
#amon at irc.perl.org is also available.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom@gmail.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "noblejasper" 4
.IX Item "noblejasper"
.PD 0
.IP "hiratara" 4
.IX Item "hiratara"
.IP "s\-aska" 4
.IX Item "s-aska"
.IP "Kentaro Kuribayashi" 4
.IX Item "Kentaro Kuribayashi"
.IP "Yuki Ibe" 4
.IX Item "Yuki Ibe"
.IP "mattn" 4
.IX Item "mattn"
.IP "Masahiro Nagano" 4
.IX Item "Masahiro Nagano"
.IP "rightgo09" 4
.IX Item "rightgo09"
.IP "karupanerura" 4
.IX Item "karupanerura"
.IP "hatyuki" 4
.IX Item "hatyuki"
.IP "Keiji, Yoshimi" 4
.IX Item "Keiji, Yoshimi"
.IP "Nishibayashi Takuji" 4
.IX Item "Nishibayashi Takuji"
.IP "dragon3" 4
.IX Item "dragon3"
.IP "Fuji, Goro" 4
.IX Item "Fuji, Goro"
.IP "issm" 4
.IX Item "issm"
.IP "hisaichi5518" 4
.IX Item "hisaichi5518"
.IP "Adrian" 4
.IX Item "Adrian"
.IP "Fuji, Goro" 4
.IX Item "Fuji, Goro"
.IP "\s-1ITO\s0 Nobuaki" 4
.IX Item "ITO Nobuaki"
.IP "Geraud \s-1CONTINSOUZAS\s0" 4
.IX Item "Geraud CONTINSOUZAS"
.IP "Syohei \s-1YOSHIDA\s0" 4
.IX Item "Syohei YOSHIDA"
.IP "magnolia" 4
.IX Item "magnolia"
.IP "Katsuhiro Konishi" 4
.IX Item "Katsuhiro Konishi"
.PD
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
