.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AWS::CLIWrapper 3"
.TH AWS::CLIWrapper 3 "2014-02-27" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AWS::CLIWrapper \- Wrapper module for aws\-cli
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use AWS::CLIWrapper;
\&    
\&    my $aws = AWS::CLIWrapper\->new(
\&        region => \*(Aqus\-west\-1\*(Aq,
\&    );
\&    
\&    my $res = $aws\->ec2(
\&        \*(Aqdescribe\-instances\*(Aq => {
\&            instance_ids => [\*(Aqi\-XXXXX\*(Aq, \*(Aqi\-YYYYY\*(Aq],
\&        },
\&        timeout => 18, # optional. default is 30 seconds
\&    );
\&    
\&    if ($res) {
\&        for my $rs ( @{ $res\->{Reservations} }) {
\&            for my $is (@{ $rs\->{Instances} }) {
\&                print $is\->{InstanceId},"\en";
\&            }
\&        }
\&    } else {
\&        warn $AWS::CLIWrapper::Error\->{Code};
\&        warn $AWS::CLIWrapper::Error\->{Message};
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
AWS::CLIWrapper is wrapper module for aws-cli (recommend: awscli >= 1.0.0, requires: >= 0.7.0).
.PP
AWS::CLIWrapper is a just wrapper module, so you can do everything what you can do with aws-cli.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew\fR($param:HashRef)" 4
.IX Item "new($param:HashRef)"
Constructor of AWS::CLIWrapper. Acceptable param are:
.Sp
.Vb 3
\&    region       region_name:Str
\&    profile      profile_name:Str
\&    endpoint_url endpoint_url:Str
.Ve
.ie n .IP "\fBautoscaling\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBautoscaling\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "autoscaling($operation:Str, $param:HashRef, %opt:Hash)"
.PD 0
.ie n .IP "\fBcloudformation\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBcloudformation\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "cloudformation($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBcloudwatch\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBcloudwatch\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "cloudwatch($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBdirectconnect\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBdirectconnect\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "directconnect($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBdynamodb\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBdynamodb\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "dynamodb($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBec2\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBec2\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "ec2($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBelasticache\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBelasticache\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "elasticache($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBelasticbeanstalk\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBelasticbeanstalk\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "elasticbeanstalk($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBelastictranscoder\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBelastictranscoder\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "elastictranscoder($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBelb\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBelb\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "elb($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBiam\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBiam\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "iam($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBimportexport\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBimportexport\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "importexport($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBopsworks\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBopsworks\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "opsworks($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBrds\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBrds\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "rds($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBredshift\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBredshift\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "redshift($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBroute53\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBroute53\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "route53($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBs3\fR($operation:Str, $path:ArrayRef, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBs3\fR($operation:Str, \f(CW$path:ArrayRef\fR, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "s3($operation:Str, $path:ArrayRef, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBs3api\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBs3api\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "s3api($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBses\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBses\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "ses($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBsns\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBsns\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "sns($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBsqs\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBsqs\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "sqs($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBstoragegateway\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBstoragegateway\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "storagegateway($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBsts\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBsts\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "sts($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBsupport\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBsupport\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "support($operation:Str, $param:HashRef, %opt:Hash)"
.ie n .IP "\fBswf\fR($operation:Str, $param:HashRef, %opt:Hash)" 4
.el .IP "\fBswf\fR($operation:Str, \f(CW$param:HashRef\fR, \f(CW%opt:Hash\fR)" 4
.IX Item "swf($operation:Str, $param:HashRef, %opt:Hash)"
.PD
AWS::CLIWrapper provides methods same as services of aws-cli. Please refer to `aws help`.
.Sp
First arg \*(L"operation\*(R" is same as operation of aws-cli. Please refer to `aws \s-1SERVICE\s0 help`.
.Sp
Second arg \*(L"param\*(R" is same as command line option of aws-cli.
Please refer to `aws \s-1SERVICE\s0 \s-1OPERATION\s0 help`.
.Sp
Key of param is string that trimmed leading \*(L"\-\-\*(R" and replaced \*(L"\-\*(R" to \*(L"_\*(R" for command line option (\-\-instance\-ids \-> instance_ids).
Value of param is \s-1SCALAR\s0 or \s-1ARRAYREF\s0 or \s-1HASHREF\s0.
.Sp
You can specify \f(CW\*(C`(boolean)\*(C'\fR parameter by \f(CW$AWS::CLIWrapper::true\fR or \f(CW$AWS::CLIWrapper::false\fR.
.Sp
.Vb 5
\&    my $res = $aws\->ec2(\*(Aqassign\-private\-ip\-addresses\*(Aq, {
\&        network_interface_id => $eni_id,
\&        private_ip_addresses => [ $private_ip_1, $private_ip_2 ],
\&        allow_reassignment   => $AWS::CLIWrapper::true,
\&       })
.Ve
.Sp
Special case: several OPERATIONs take a single arg. For example \*(L"aws s3api get-object ... output_file\*(R". In this case, You can specify below using \f(CW\*(C`output_file\*(C'\fR key:
.Sp
.Vb 5
\&    my $res = $aws\->s3api(\*(Aqget\-object\*(Aq, {
\&        bucket      => \*(Aqmy\-bucket\*(Aq,
\&        key         => \*(Aqblahblahblah\*(Aq,
\&        output_file => \*(Aq/path/to/output/file\*(Aq,
\&    })
.Ve
.Sp
Special case: s3 \s-1OPERATION\s0 takes one or two arguments in addition to options. For example \*(L"aws s3 cp LocalPath s3://S3Path\*(R". Pass an extra \s-1ARRAYREF\s0 to the s3 method in this case:
.Sp
.Vb 3
\&    my $res = $aws\->s3(\*(Aqcp\*(Aq, [\*(AqLocalPath\*(Aq, \*(Aqs3://S3Path\*(Aq], {
\&        exclude     => \*(Aq*.bak\*(Aq,
\&    })
.Ve
.Sp
Third arg \*(L"opt\*(R" is optional. Available key/values are below:
.Sp
.Vb 3
\&  timeout => Int
\&    Maximum time the "aws" command is allowed to run before aborting.
\&    default is 30 seconds.
\&
\&  nofork => Int (>0)
\&    Call IPC::Cmd::run vs. IPC::Cmd::run_forked (mostly useful if/when in perl debugger).  Note: \*(Aqtimeout\*(Aq, if used with \*(Aqnofork\*(Aq, will merely cause an alarm and return.  ie. \*(Aqrun\*(Aq will NOT kill the awscli command like \*(Aqrun_forked\*(Aq will.
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1AWS_CONFIG_FILE\s0" 4
.IX Item "AWS_CONFIG_FILE"
.PD 0
.IP "\s-1AWS_ACCESS_KEY_ID\s0" 4
.IX Item "AWS_ACCESS_KEY_ID"
.IP "\s-1AWS_SECRET_ACCESS_KEY\s0" 4
.IX Item "AWS_SECRET_ACCESS_KEY"
.IP "\s-1AWS_DEFAULT_REGION\s0" 4
.IX Item "AWS_DEFAULT_REGION"
.PD
See documents of aws-cli.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1HIROSE\s0 Masaaki <hirose31 _at_ gmail.com>
.SH "REPOSITORY"
.IX Header "REPOSITORY"
https://github.com/hirose31/AWS\-CLIWrapper <https://github.com/hirose31/AWS-CLIWrapper>
.PP
.Vb 1
\&  git clone git://github.com/hirose31/AWS\-CLIWrapper.git
.Ve
.PP
patches and collaborators are welcome.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://aws.amazon.com/cli/>,
https://github.com/aws/aws\-cli <https://github.com/aws/aws-cli>,
<http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Welcome.html>,
<https://github.com/boto/botocore>,
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
