.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Stamped 3"
.TH File::Stamped 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Stamped \- time stamped log file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use File::Stamped;
\&    my $fh = File::Stamped\->new(pattern => \*(Aq/var/log/myapp.log.%Y%m%d.txt\*(Aq);
\&    $fh\->print("OK\en");
\&
\&    # with Log::Minimal
\&    use Log::Minimal;
\&    my $fh = File::Stamped\->new(pattern => \*(Aq/var/log/myapp.log.%Y%m%d.txt\*(Aq);
\&    local $Log::Minimal::PRINT = sub {
\&        my ( $time, $type, $message, $trace) = @_;
\&        print {$fh} "$time [$type] $message at $trace\en";
\&    };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
File::Stamped is utility library for logging. File::Stamped object mimic file handle.
.PP
You can use \*(L"myapp.log.%Y%m%d.log\*(R" style log file.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $fh = File::Stamped\->new(%args);" 4
.el .IP "my \f(CW$fh\fR = File::Stamped\->new(%args);" 4
.IX Item "my $fh = File::Stamped->new(%args);"
This method creates new instance of File::Stamped. The arguments are followings.
.Sp
You need to specify one of \fBpattern\fR or \fBcallback\fR.
.RS 4
.IP "pattern : Str" 4
.IX Item "pattern : Str"
This is file name pattern. It is the pattern for filename. The format is \fIPOSIX::strftime()\fR, see also \s-1POSIX\s0.
.IP "callback : CodeRef" 4
.IX Item "callback : CodeRef"
You can use a CodeRef to generate file name.
.Sp
File::Stamped pass only one arguments to callback function.
.Sp
Here is a example code:
.Sp
.Vb 8
\&    my $pattern = \*(Aq/path/to/myapp.log.%Y%m%d.log\*(Aq;
\&    my $f = File::Stamped\->new(callback => sub {
\&        my $file_stamped = shift;
\&        local $_ = $pattern;
\&        s/!!/$$/ge;
\&        $_ = POSIX::strftime($_, localtime());
\&        return $_;
\&    });
.Ve
.IP "close_after_write : Bool" 4
.IX Item "close_after_write : Bool"
Default value is 1.
.IP "iomode: Str" 4
.IX Item "iomode: Str"
This is \s-1IO\s0 mode for opening file.
.Sp
Default value is '>>:utf8'.
.IP "autoflush: Bool" 4
.IX Item "autoflush: Bool"
This attribute changes $|.
.IP "rotationtime: Int" 4
.IX Item "rotationtime: Int"
The time between log file generates in seconds. Default value is 1.
.IP "auto_make_dir: Bool" 4
.IX Item "auto_make_dir: Bool"
If this attribute is true, auto make directry of log file. Default value is false.
.IP "symlink: Str" 4
.IX Item "symlink: Str"
generate symlink file for log file.
.RE
.RS 4
.RE
.ie n .IP "$fh\->print($str: Str)" 4
.el .IP "\f(CW$fh\fR\->print($str: Str)" 4
.IX Item "$fh->print($str: Str)"
This method prints the \f(CW$str\fR to the file.
.ie n .IP "$fh\->syswrite($str: Str [, $len: Int, $offset: Int])" 4
.el .IP "\f(CW$fh\fR\->syswrite($str: Str [, \f(CW$len:\fR Int, \f(CW$offset:\fR Int])" 4
.IX Item "$fh->syswrite($str: Str [, $len: Int, $offset: Int])"
This method prints the \f(CW$str\fR to the file.
This method uses syswrite internally. Writing is not buffered.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom AAJKLFJEF@ gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Dispatch::File::Stamped
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Tokuhiro Matsuno
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
