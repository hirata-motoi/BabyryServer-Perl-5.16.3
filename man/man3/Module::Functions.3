.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Functions 3"
.TH Module::Functions 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Functions \- Get function list from package.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    package My::Class;
\&    use parent qw/Exporter/;
\&    use Module::Functions;
\&    our @EXPORT = get_public_functions();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Module::Functions is a library to get a public functions list from package.
It is useful to create a exportable function list.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "my @functions = \fIget_public_functions()\fP"
.el .SS "my \f(CW@functions\fP = \fIget_public_functions()\fP"
.IX Subsection "my @functions = get_public_functions()"
.ie n .SS "my @functions = get_public_functions($package)"
.el .SS "my \f(CW@functions\fP = get_public_functions($package)"
.IX Subsection "my @functions = get_public_functions($package)"
Get a public function list from the package.
.PP
If you don't pass the \f(CW$package\fR parameter, the function use \f(CWcaller(0)\fR as a source package.
.PP
This function does not get a function, that imported from other package.
.PP
For example:
.PP
.Vb 3
\&    package Foo;
\&    use File::Spec::Functions qw/catfile/;
\&    sub foo { }
.Ve
.PP
In this case, return value of \f(CW\*(C`get_public_functions(\*(AqFoo\*(Aq)\*(C'\fR does not contain 'catfile'. Return value is \f(CW\*(C`(\*(Aqfoo\*(Aq)\*(C'\fR.
.PP
\fI\s-1RULES\s0\fR
.IX Subsection "RULES"
.PP
This \f(CW\*(C`get_public_functions\*(C'\fR removes some function names.
.PP
Rules are here:
.IP "\s-1BEGIN\s0, \s-1UNITCHECK\s0, \s-1CHECK\s0, \s-1INIT\s0, and \s-1END\s0 are hidden." 4
.IX Item "BEGIN, UNITCHECK, CHECK, INIT, and END are hidden."
.PD 0
.IP "'import' method is hidden" 4
.IX Item "'import' method is hidden"
.IP "function name prefixed by '_' is hidden." 4
.IX Item "function name prefixed by '_' is hidden."
.PD
.ie n .SS "my @functions = \fIget_full_functions()\fP;"
.el .SS "my \f(CW@functions\fP = \fIget_full_functions()\fP;"
.IX Subsection "my @functions = get_full_functions();"
.ie n .SS "my @functions = get_full_functions($package)"
.el .SS "my \f(CW@functions\fP = get_full_functions($package)"
.IX Subsection "my @functions = get_full_functions($package)"
This function get \s-1ALL\s0 functions.
\&\s-1ALL\s0 means functions that were imported from other packages.
And included specially named functions(\s-1BEGIN\s0 , \s-1UNITCHECK\s0 , \s-1CHECK\s0 , \s-1INIT\s0 and \s-1END\s0).
Of course, included also private functions( ex. _foo ).
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom AAJKLFJEF@ \s-1GMAIL\s0 \s-1COM\s0>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Exporter::Auto have same feature of this module, but it stands on very tricky thing.
.PP
Class::Inspector finds the function list. But it does not check the function defined at here or imported from other package.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Tokuhiro Matsuno
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
