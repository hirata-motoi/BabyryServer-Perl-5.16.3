.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::LeakTrace::JA 3"
.TH Test::LeakTrace::JA 3 "2011-10-07" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::LeakTrace::JA \- XXXXXXXXXXX
.SH "VERSION"
.IX Header "VERSION"
This document describes Test::LeakTrace version 0.14.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Test::LeakTrace;
\&
\&        # simple report
\&        leaktrace{
\&                # ...
\&        };
\&
\&        # verbose output
\&        leaktrace{
\&                # ...
\&        } \-verbose;
\&
\&        # with callback
\&        leaktrace{
\&                # ...
\&        } sub {
\&                my($ref, $file, $line) = @_;
\&                warn "leaked $ref from $file line\en";
\&        };
\&
\&        my @refs = leaked_refs{
\&                # ...
\&        };
\&        my @info = leaked_info{
\&                # ...
\&        };
\&
\&        my $count = leaked_count{
\&                # ...
\&        };
\&
\&        # standard test interface
\&        use Test::LeakTrace;
\&
\&        no_leaks_ok{
\&                # ...
\&        } "description";
\&
\&        leaks_cmp_ok{
\&                # ...
\&        } \*(Aq<\*(Aq, 10;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
PerlXGCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
\&\f(CW\*(C`Test::LeakTrce\*(C'\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0\f(CW\*(C`Test::Builder\*(C'\fRXXXXXXXXXXXXXXXXXXXXXXXXPerlXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXSVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXPerlXXXXXXXXXXXXXXXXXSXXXXXXPerlXXXXXXXXXXXXXXXXXXXXXXXXXXX
.PP
\&\s-1XXX\s0\fB\s-1XXX\s0\fRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXPerlXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "Exported functions"
.IX Subsection "Exported functions"
\fI\f(CI\*(C`leaked_info { BLOCK }\*(C'\fI\fR
.IX Subsection "leaked_info { BLOCK }"
.PP
\&\fI\s-1BLOCK\s0\fR\s-1XXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0\f(CW\*(C`[$ref, $file, $line]\*(C'\fR\s-1XXXXXXXXXXXX\s0
.PP
XXXXXXXXPerlXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXPerlXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXPerlXXXXXXXXXXXXXXXXXXXXX\f(CW\*(C`Data::Dumper\*(C'\fR\s-1XXXXXXXXXXXXXXXX\s0
.PP
\fI\f(CI\*(C`leaked_refs { BLOCK }\*(C'\fI\fR
.IX Subsection "leaked_refs { BLOCK }"
.PP
\&\fI\s-1BLOCK\s0\fR\s-1XXXXXXXXXXSVXXXXXXXXXXXXXXXXX\s0
.PP
\&\f(CW\*(C`map{ $_\->[0] } leaked_info{ BLOCK }\*(C'\fR\s-1XXXXXXXXXXXXXX\s0
.PP
\fI\f(CI\*(C`leaked_count { BLOCK }\*(C'\fI\fR
.IX Subsection "leaked_count { BLOCK }"
.PP
\&\fI\s-1BLOCK\s0\fR\s-1XXXXXXXXXXSVXXXXXXXXXXXXXXXX\s0
.PP
\&\f(CW\*(C`leaked_info()\*(C'\fRX\f(CW\*(C`leaked_refs()\*(C'\fR\s-1XXXXXXXXXXXXXXXXXXXXX\s0
\&\f(CW\*(C`leaked_count()\*(C'\fR\s-1XXXXXXXXXXXXXXX\s0
.PP
\fI\f(CI\*(C`leaktrace { BLOCK } ?($mode | \e&callback)\*(C'\fI\fR
.IX Subsection "leaktrace { BLOCK } ?($mode | &callback)"
.PP
\&\fI\s-1BLOCK\s0\fR\s-1XXXXXXXXXXXXXXXXXXX\s0\f(CW*STDERR\fR\s-1XXXXXXX\s0
.PP
\&\s-1XXXXXXXXXX\s0\fI\f(CI$mode\fI\fR\s-1XXXXXXXXXXXXXX\s0
\&\s-1XXXXX\s0\fI\f(CI$mode\fI\fR\s-1XXXXXXXXX\s0
.IP "\-simple" 4
.IX Item "-simple"
\&\s-1XXXXXXXXXXXXXXXXXSVXXXXXXXXXXXXXXXXXXXXXXXX\s0
.IP "\-sv_dump" 4
.IX Item "-sv_dump"
\&\fB\-simple\fR\s-1XXXXX\s0\f(CW\*(C`sv_dump()\*(C'\fR\s-1XSVXXXXXXXXXXX\s0
\&\s-1XXXX\s0\f(CW\*(C`Devel::Peek::Dump()\*(C'\fR\s-1XXXXXXXXXXX\s0
.IP "\-lines" 4
.IX Item "-lines"
\&\fB\-simple\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.IP "\-verbose" 4
.IX Item "-verbose"
\&\fB\-simple\fRX\fB\-sv_dump\fRX\fB\-lines\fR\s-1XXXXXXXXXX\s0
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\fI\e&callback\fR\s-1XXXXXXSVXXXXXXXXXXXXXXXXXXSVXXXXXXXXXXXXXXXXXX3XXXX\s0
.PP
\fI\f(CI\*(C`no_leaks_ok { BLOCK } ?$description\*(C'\fI\fR
.IX Subsection "no_leaks_ok { BLOCK } ?$description"
.PP
\&\fI\s-1BLOCK\s0\fR\s-1XXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXX\s0\f(CW\*(C`Test::Builder\*(C'\fR\s-1XXXXXXXXXXXX\s0
.PP
\&\s-1XXX\s0\fI\s-1BLOCK\s0\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
\fI\f(CI\*(C`leaks_cmp_ok { BLOCK } $cmp_op, $count, ?$description\*(C'\fI\fR
.IX Subsection "leaks_cmp_ok { BLOCK } $cmp_op, $count, ?$description"
.PP
\&\fI\s-1BLOCK\s0\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXX\s0\f(CW\*(C`Test::Builder\*(C'\fR\s-1XXXXXXXXXXXX\s0
.PP
\&\s-1XXX\s0\fI\s-1BLOCK\s0\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.SS "Script interface"
.IX Subsection "Script interface"
\&\f(CW\*(C`Devel::LeakTrace\*(C'\fR\s-1XXXXXXXXXXXXXXXXXXXX\s0\f(CW\*(C`Test::LeakTrace::Script\*(C'\fR\s-1XXXXXXXX\s0\f(CW\*(C`use Test::LeakTrace::Script\*(C'\fR\s-1XXXXXX\s0\f(CW\*(C`leaktrace()\*(C'\fR\s-1XXXXXX\s0
.PP
.Vb 2
\&        $ TEST_LEAKTRACE=\-sv_dump perl \-MTest::LeakTrace::Script script.pl
\&        $ perl \-MTest::LeakTrace::Script=\-verbose script.pl
\&
\&        #!perl
\&        # ...
\&
\&        use Test::LeakTrace::Script sub{
\&                my($ref, $file, $line) = @_;
\&                # ...
\&        };
\&
\&        # ...
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Testing modules"
.IX Subsection "Testing modules"
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
.Vb 5
\&        #!perl \-w
\&        use strict;
\&        use constant HAS_LEAKTRACE => eval{ require Test::LeakTrace };
\&        use Test::More HAS_LEAKTRACE ? (tests => 1) : (skip_all => \*(Aqrequire Test::LeakTrace\*(Aq);
\&        use Test::LeakTrace;
\&
\&        use Some::Module;
\&
\&        leaks_cmp_ok{
\&                my $o = Some::Module\->new();
\&                $o\->something();
\&                $o\->something_else();
\&        } \*(Aq<\*(Aq, 1;
.Ve
.SH "GUTS"
.IX Header "GUTS"
\&\f(CW\*(C`Test::LeakTrace\*(C'\fRXXXXXXXXXXXXXXXXXXXPerlXXXXXSVXXXXXXXXXXXXXXXXXXXXXX\fIsv.c\fR\s-1XXXXXXXXXX\s0
\&\s-1XXXXXXXXX\s0\fIsv.c\fR\s-1XXX\s0\f(CW\*(C`S_visit()\*(C'\fR\s-1XXXXXXXXXXXXXXXXXXXX\s0
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXSVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXSVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXSVXXXXXXXXXXXXXXXXXXXXXXXXXXXSVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
XXXXXPerlXXXXXXXXXXXXXXXXXX
.PP
.Vb 5
\&        my %used_sv;
\&        foreach my $sv(@ARENA){
\&                $used_sv{$sv}++;
\&        }
\&        $block\->();
\&
\&        my @leaked
\&        foreach my $sv(@ARENA){
\&                if(not exists $used_sv{$sv}){
\&                        push @leaked, $sv;
\&                }
\&        }
\&        say \*(Aqleaked count: \*(Aq, scalar @leaked;
.Ve
.PP
\&\s-1XXXXXSVXXXXXXXXXXXXXXXXXXXX\s0\f(CW\*(C`leaked_refs()\*(C'\fRX\f(CW\*(C`leaked_count()\*(C'\fR\s-1XXXXXXXXXXXXXXSVXXXXXXXXXXXXX\s0
.PP
XXXXXXXXXSVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXPerl 5.10XXXXSVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fRXXXXPerlXXXXXXXXXXXXXXX
.PP
\&\s-1XXXX\s0\f(CW\*(C`Test::LeakTrace\*(C'\fR\s-1XXXXXXX\s0\f(CW\*(C`PL_runops\*(C'\fRXXXXXXPerl VMXOPXXXXXXXX1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXPerlXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.PP
\&\s-1XXX\s0\f(CW\*(C`no_leaks_ok()\*(C'\fR\s-1XXXXXXXXXXXX\s0\f(CW\*(C`leaked_count()\*(C'\fR\s-1XXXXXXSVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0\f(CW\*(C`leaktrace()\*(C'\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Perl 5.8.1 or later, and a C compiler.
.SH "CAVEATS"
.IX Header "CAVEATS"
\&\f(CW\*(C`Test::LeakTrace\*(C'\fRX\f(CW\*(C`Devel::Cover\*(C'\fR\s-1XXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXX\s0\f(CW\*(C`Devel::Cover\*(C'\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.SH "BUGS"
.IX Header "BUGS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to the author.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Devel::LeakTrace.
.PP
Devel::LeakTrace::Fast.
.PP
Test::TraceObject.
.PP
Test::Weak.
.PP
For guts:
.PP
perlguts.
.PP
perlhack.
.PP
sv.c.
.SH "AUTHOR"
.IX Header "AUTHOR"
Goro Fuji <gfuji(at)cpan.org>.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2009, Goro Fuji. Some rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
