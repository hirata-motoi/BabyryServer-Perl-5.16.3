.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FormValidator::Lite 3"
.TH FormValidator::Lite 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FormValidator::Lite \- lightweight form validation library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use FormValidator::Lite;
\&
\&    FormValidator::Lite\->load_constraints(qw/Japanese/);
\&
\&    my $q = CGI\->new();
\&    my $validator = FormValidator::Lite\->new($q);
\&    $validator\->load_function_message(\*(Aqen\*(Aq);
\&    my $res = $validator\->check(
\&        name => [qw/NOT_NULL/],
\&        name_kana => [qw/NOT_NULL KATAKANA/],
\&        {mails => [qw/mail1 mail2/]} => [\*(AqDUPLICATION\*(Aq],
\&    );
\&    if ( ..... return_true_if_error() ..... ) {
\&        $validator\->set_error(\*(Aqlogin_id\*(Aq => \*(AqDUPLICATION\*(Aq);
\&    }
\&    if ($validator\->has_error) {
\&        ...
\&    }
\&
\&    # in your template
\&    <ul>
\&    ? for my $msg ($validator\->get_error_messages) {
\&        <li><?= $msg ?></li>
\&    ? }
\&    </ul>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
FormValidator::Lite is a simple, fast implementation for form validation.
.PP
\&\s-1IT\s0'S \s-1IN\s0 \s-1BETA\s0 \s-1QUALITY\s0. \s-1API\s0 \s-1MAY\s0 \s-1CHANGE\s0 \s-1IN\s0 \s-1THE\s0 \s-1FUTURE\s0.
.SH "HOW TO WRITE YOUR OWN CONSTRAINTS"
.IX Header "HOW TO WRITE YOUR OWN CONSTRAINTS"
Create your own constraint package as such :
.PP
.Vb 4
\&    package MyApp::Validator::Constraint;
\&    use strict;
\&    use warnings;
\&    use FormValidator::Lite::Constraint;
\&    
\&    rule \*(AqIS_EVEN\*(Aq => sub {
\&        return $_ % 2 ? 0 : 1;
\&    };
\&    
\&    rule \*(AqIS_GREATER_THAN\*(Aq => sub {
\&        my ($min) = @_;
\&        return $_ >= $min;
\&    }
\&    alias \*(AqIS_GREATER_THAN\*(Aq => \*(AqIS_BIGGER_THAN\*(Aq;
\&    
\&    1;
.Ve
.PP
And in your controller :
.PP
.Vb 1
\&    use FormValidator::Lite qw("+MyApp::Validator::Constraint");
\&    
\&    my $validator = FormValidator::Lite\->new(...);
\&    $validator\->set_message_data(...);
\&    $validator\->check(
\&        some_param => [ \*(AqUINT\*(Aq, \*(AqIS_EVEN\*(Aq, [\*(AqIS_GREATER_THAN\*(Aq => 42] ],
\&    );
.Ve
.PP
When defining a rule keep in mind that the value for the parameter comes from
\&\f(CW$_\fR and the additional arguments defined in your validation
specifications come from \f(CW@_\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $validator = FormValidator::Lite\->new($q);" 4
.el .IP "my \f(CW$validator\fR = FormValidator::Lite\->new($q);" 4
.IX Item "my $validator = FormValidator::Lite->new($q);"
Create a new instance.
.Sp
The constructor takes a mandatory argument \f(CW$q\fR that is a query-like 
object such as Apache::Request, \s-1CGI\s0.pm, Plack::Request. The object \s-1MUST\s0 have
a \f(CW\*(C`$q\->param\*(C'\fR method.
.Sp
\&\fB\s-1EXPERIMENTAL:\s0 \fR You can pass the hash value for \f(CW$q\fR.
.ie n .IP "$validator\->\fIquery()\fR" 4
.el .IP "\f(CW$validator\fR\->\fIquery()\fR" 4
.IX Item "$validator->query()"
.PD 0
.ie n .IP "$validator\->query($query)" 4
.el .IP "\f(CW$validator\fR\->query($query)" 4
.IX Item "$validator->query($query)"
.PD
Getter/Setter for the query attribute.
.ie n .IP "$validator\->check(@specs_array)" 4
.el .IP "\f(CW$validator\fR\->check(@specs_array)" 4
.IX Item "$validator->check(@specs_array)"
Validate the query against a set of specifications defined in the
\&\f(CW@specs_array\fR argument. In the most common case, the array is a sequence
of pairs : the first item is the parameter name and the second item is an
array reference with a list of constraint rules to apply on the query's value
for the parameter.
.Sp
.Vb 5
\&    my $res = $validator\->check(
\&        name      => [qw/NOT_NULL/],
\&        name_kana => [qw/NOT_NULL KATAKANA/],
\&        {mails => [qw/mail1 mail2/]} => [\*(AqDUPLICATION\*(Aq],
\&    );
.Ve
.Sp
In the above example \fIname\fR is a parameter. \fI\s-1NOT_NULL\s0\fR, \fI\s-1KATAKANA\s0\fR and
\&\fI\s-1DUPLICATION\s0\fR are the names of the constraints.
.ie n .IP "$validator\->is_error($key)" 4
.el .IP "\f(CW$validator\fR\->is_error($key)" 4
.IX Item "$validator->is_error($key)"
Return true value if there is an error for the \f(CW$key\fR parameter.
.ie n .IP "$validator\->\fIis_valid()\fR" 4
.el .IP "\f(CW$validator\fR\->\fIis_valid()\fR" 4
.IX Item "$validator->is_valid()"
Return true value if \f(CW$validator\fR didn't detect any error.
.Sp
This is the same as \f(CW\*(C`!$validator\->has_error()\*(C'\fR.
.ie n .IP "$validator\->\fIhas_error()\fR" 4
.el .IP "\f(CW$validator\fR\->\fIhas_error()\fR" 4
.IX Item "$validator->has_error()"
Return true value if \f(CW$validator\fR detects error.
.Sp
This is the same as \f(CW\*(C`!$validator\->is_valid()\*(C'\fR.
.ie n .IP "$validator\->set_error($param, $rule_name)" 4
.el .IP "\f(CW$validator\fR\->set_error($param, \f(CW$rule_name\fR)" 4
.IX Item "$validator->set_error($param, $rule_name)"
Manually set a new error for the parameter named \f(CW$param\fR. The rule's name
is \f(CW$rule_name\fR.
.ie n .IP "$validator\->\fIerrors()\fR" 4
.el .IP "\f(CW$validator\fR\->\fIerrors()\fR" 4
.IX Item "$validator->errors()"
Return all the errors as a hash reference where the keys are the parameters
and the values are a hash reference with the failing constraints.
.Sp
.Vb 4
\&    {
\&        \*(Aqfoo\*(Aq => { \*(AqNOT_NULL\*(Aq => 1, \*(AqINT\*(Aq => 1 },
\&        \*(Aqbar\*(Aq => { \*(AqEMAIL\*(Aq => 1, },
\&    }
.Ve
.ie n .IP "$validator\->load_constraints($name)" 4
.el .IP "\f(CW$validator\fR\->load_constraints($name)" 4
.IX Item "$validator->load_constraints($name)"
.Vb 1
\&    $validator\->load_constraints("DATE", "Email");
\&
\&    # or load your own constraints
\&    $validator\->load_constraints("+MyApp::FormValidator::Lite::Constraint");
.Ve
.Sp
You can also load the constraints during import :
.Sp
.Vb 1
\&    use FormValidator::Lite qw/Date Email/;
.Ve
.Sp
Load constraint components named \f(CW"FormValidator::Lite::Constraint::${name}"\fR.
.ie n .IP "$validator\->load_function_message($lang)" 4
.el .IP "\f(CW$validator\fR\->load_function_message($lang)" 4
.IX Item "$validator->load_function_message($lang)"
.Vb 1
\&    $validator\->load_function_message(\*(Aqja\*(Aq);
.Ve
.Sp
Load function message file.
.Sp
Currently, FormValidator::Lite::Messages::ja and
FormValidator::Lite::Messages::en are available.
.ie n .IP "$validator\->set_param_message($param => $message, ...)" 4
.el .IP "\f(CW$validator\fR\->set_param_message($param => \f(CW$message\fR, ...)" 4
.IX Item "$validator->set_param_message($param => $message, ...)"
.Vb 3
\&    $validator\->set_param_message(
\&        name => \*(AqYour Name\*(Aq,
\&    );
.Ve
.Sp
Add a message-friendly description for the parameter.
.ie n .IP "$validator\->set_message(""$param.$func"" => $message)" 4
.el .IP "\f(CW$validator\fR\->set_message(``$param.$func'' => \f(CW$message\fR)" 4
.IX Item "$validator->set_message($param.$func => $message)"
.Vb 1
\&    $v\->set_message(\*(Aqzip.jzip\*(Aq => \*(AqPlease input correct zip number.\*(Aq);
.Ve
.Sp
Set an error message for a given \f(CW$param\fR and \f(CW$func\fR pair.
.ie n .IP "$validator\->set_message_data({ message => $msg, param => $param, function => $function })" 4
.el .IP "\f(CW$validator\fR\->set_message_data({ message => \f(CW$msg\fR, param => \f(CW$param\fR, function => \f(CW$function\fR })" 4
.IX Item "$validator->set_message_data({ message => $msg, param => $param, function => $function })"
.Vb 10
\&    $v\->set_message_data(YAML::Load(<<\*(Aq...\*(Aq));
\&    \-\-\-
\&    message:
\&      zip.jzip: Please input correct zip number.
\&    param:
\&      name: Your Name
\&    function:
\&      not_null: "[_1] is empty"
\&      hiragana: "[_1] is not Hiragana"
\&    ...
.Ve
.Sp
Set the error message map. In the 'function' and 'message' sections,
\&\f(CW\*(C`[_1]\*(C'\fR will be replaced by \f(CW\*(C`build_message\*(C'\fR with the description of
the failing parameter provided in the 'param' section.
.ie n .IP """$validator\->build_message($tmpl, @args)""" 4
.el .IP "\f(CW$validator\->build_message($tmpl, @args)\fR" 4
.IX Item "$validator->build_message($tmpl, @args)"
replace [_1] in \f(CW$tmpl\fR by \f(CW@args\fR.
.Sp
Setup error message map.
.ie n .IP """$validator\->set_message(""$param.$func"" => $message)""" 4
.el .IP "\f(CW$validator\->set_message(``$param.$func'' => $message)\fR" 4
.IX Item "$validator->set_message(""$param.$func"" => $message)"
.Vb 1
\&    $v\->set_message(\*(Aqzip.jzip\*(Aq => \*(AqPlease input correct zip number.\*(Aq);
.Ve
.Sp
Note that it will void any previous calls to \f(CW\*(C`load_function_message\*(C'\fR,
\&\f(CW\*(C`set_message\*(C'\fR or \f(CW\*(C`set_param_message\*(C'\fR.
.ie n .IP "my @errors = $validator\->\fIget_error_messages()\fR" 4
.el .IP "my \f(CW@errors\fR = \f(CW$validator\fR\->\fIget_error_messages()\fR" 4
.IX Item "my @errors = $validator->get_error_messages()"
.PD 0
.ie n .IP "my $errors = $validator\->\fIget_error_messages()\fR" 4
.el .IP "my \f(CW$errors\fR = \f(CW$validator\fR\->\fIget_error_messages()\fR" 4
.IX Item "my $errors = $validator->get_error_messages()"
.PD
Get all the error messages for the query. This method returns an array in list
context and an array reference otherwise.
.ie n .IP "my $msg = $validator\->get_error_message($param => $func)" 4
.el .IP "my \f(CW$msg\fR = \f(CW$validator\fR\->get_error_message($param => \f(CW$func\fR)" 4
.IX Item "my $msg = $validator->get_error_message($param => $func)"
Generate the error message for parameter \f(CW$param\fR and function
\&\f(CW$func\fR.
.ie n .IP "my @msgs = $validator\->get_error_messages_from_param($param)" 4
.el .IP "my \f(CW@msgs\fR = \f(CW$validator\fR\->get_error_messages_from_param($param)" 4
.IX Item "my @msgs = $validator->get_error_messages_from_param($param)"
Get all the error messages for the parameter \f(CW$param\fR.
.SH "WHY NOT FormValidator::Simple?"
.IX Header "WHY NOT FormValidator::Simple?"
Yes, I know. This module is very similar with \s-1FV::S\s0.
.PP
But, FormValidator::Simple is too heavy for me.
FormValidator::Lite is fast!
.PP
.Vb 6
\&   Perl: 5.010000
\&   FVS: 0.23
\&   FVL: 0.02
\&                           Rate FormValidator::Simple   FormValidator::Lite
\&   FormValidator::Simple  353/s                    \-\-                  \-75%
\&   FormValidator::Lite   1429/s                  304%                    \-\-
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom AAJKLFJEF@ gmail.com>
.SH "THANKS TO"
.IX Header "THANKS TO"
craftworks
.PP
nekokak
.PP
tomi-ru
.SH "SEE ALSO"
.IX Header "SEE ALSO"
FormValidator::Simple, Data::FormValidator, HTML::FormFu
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
