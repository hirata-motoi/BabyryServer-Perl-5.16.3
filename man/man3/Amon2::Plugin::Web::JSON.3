.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Amon2::Plugin::Web::JSON 3"
.TH Amon2::Plugin::Web::JSON 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Amon2::Plugin::Web::JSON \- JSON plugin
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Amon2::Lite;
\&
\&    _\|_PACKAGE_\|_\->load_plugins(qw/Web::JSON/);
\&
\&    get \*(Aq/\*(Aq => sub {
\&        my $c = shift;
\&        return $c\->render_json(+{foo => \*(Aqbar\*(Aq});
\&    };
\&
\&    _\|_PACKAGE_\|_\->to_app();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a \s-1JSON\s0 plugin.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """$c\->render_json(\e%dat);""" 4
.el .IP "\f(CW$c\->render_json(\e%dat);\fR" 4
.IX Item "$c->render_json(%dat);"
Generate \s-1JSON\s0 data from \f(CW\*(C`\e%dat\*(C'\fR and returns instance of Plack::Response.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "status_code_field" 4
.IX Item "status_code_field"
It specify the field name of \s-1JSON\s0 to be embedded in the 'X\-API\-Status' header.
Default is \f(CW\*(C`undef\*(C'\fR. If you set the \f(CW\*(C`undef\*(C'\fR to disable this 'X\-API\-Status' header.
.Sp
.Vb 6
\&    _\|_PACKAGE_\|_\->load_plugins(
\&        \*(AqWeb::JSON\*(Aq => { status_code_field => \*(Aqstatus\*(Aq }
\&    );
\&    ...
\&    $c\->render_json({ status => 200, message => \*(Aqok\*(Aq })
\&    # send response header \*(AqX\-API\-Status: 200\*(Aq
.Ve
.Sp
In general \s-1JSON\s0 \s-1API\s0 error code embed in a \s-1JSON\s0 by \s-1JSON\s0 \s-1API\s0 Response body.
But can not be logging the error code of \s-1JSON\s0 for the access log of a general Web Servers.
You can possible by using the 'X\-API\-Status' header.
.SH "FAQ"
.IX Header "FAQ"
.IP "How can I use \s-1JSONP\s0?" 4
.IX Item "How can I use JSONP?"
You can use \s-1JSONP\s0 by using Plack::Middleware::JSONP.
.SH "JSON and security"
.IX Header "JSON and security"
.IP "Browse the \s-1JSON\s0 files directly." 4
.IX Item "Browse the JSON files directly."
This module escapes '<', '>', and '+' characters by \*(L"\euXXXX\*(R" form. Browser don't detects the \s-1JSON\s0 as \s-1HTML\s0.
.Sp
And also this module outputs \f(CW\*(C`X\-Content\-Type\-Options: nosniff\*(C'\fR header for IEs.
.Sp
It's good enough, I hope.
.IP "\s-1JSON\s0 Hijacking" 4
.IX Item "JSON Hijacking"
Latest browsers doesn't have a \s-1JSON\s0 hijacking issue(I hope). _\|_defineSetter_\|_ or \s-1UTF\-7\s0 attack was resolved by browsers.
.Sp
But Firefox<=3.0.x and Android phones have issue on Array constructor, see <http://d.hatena.ne.jp/ockeghem/20110907/p1>.
.Sp
Firefox<=3.0.x was outdated. Web application developers doesn't need to add work-around for it, see <http://en.wikipedia.org/wiki/Firefox#Version_release_table>.
.Sp
Amon2::Plugin::Web::JSON have a \s-1JSON\s0 hijacking detection feature. Amon2::Plugin::Web::JSON returns \*(L"403 Forbidden\*(R" response if following pattern request.
.RS 4
.IP "The request have 'Cookie' header." 4
.IX Item "The request have 'Cookie' header."
.PD 0
.IP "The request doesn't have 'X\-Requested\-With' header." 4
.IX Item "The request doesn't have 'X-Requested-With' header."
.IP "The request contains /android/i string in 'User\-Agent' header." 4
.IX Item "The request contains /android/i string in 'User-Agent' header."
.IP "Request method is '\s-1GET\s0'" 4
.IX Item "Request method is 'GET'"
.RE
.RS 4
.RE
.PD
.PP
See also the hasegawayosuke's article(Japanese) <http://www.atmarkit.co.jp/fcoding/articles/webapp/05/webapp05a.html>.
.SH "FAQ"
.IX Header "FAQ"
.IP "\s-1HOW\s0 \s-1DO\s0 \s-1YOU\s0 \s-1CHANGE\s0 \s-1THE\s0 \s-1HTTP\s0 \s-1STATUS\s0 \s-1CODE\s0 \s-1FOR\s0 \s-1JSON\s0?" 4
.IX Item "HOW DO YOU CHANGE THE HTTP STATUS CODE FOR JSON?"
render_json method returns instance of Plack::Response. You can modify the response object.
.Sp
Here is a example code:
.Sp
.Vb 9
\&    get \*(Aq/\*(Aq => sub {
\&        my $c = shift;
\&        if (\-f \*(Aq/tmp/maintenance\*(Aq) {
\&            my $res = $c\->render_json({err => \*(AqUnder maintenance\*(Aq});
\&            $res\->status(503);
\&            return $res;
\&        }
\&        return $c\->render_json({err => undef});
\&    };
.Ve
.SH "THANKS TO"
.IX Header "THANKS TO"
hasegawayosuke
