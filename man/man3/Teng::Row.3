.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Teng::Row 3"
.TH Teng::Row 3 "2014-04-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Teng::Row \- Teng's Row class
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$row = Teng::Row\->new" 4
.el .IP "\f(CW$row\fR = Teng::Row\->new" 4
.IX Item "$row = Teng::Row->new"
create new Teng::Row's instance
.ie n .IP "$row\->get($col)" 4
.el .IP "\f(CW$row\fR\->get($col)" 4
.IX Item "$row->get($col)"
.Vb 1
\&    my $val = $row\->get($column_name);
\&
\&    # alias
\&    my $val = $row\->$column_name;
.Ve
.Sp
get a column value from a row object.
.Sp
Note: This method inflates values.
.ie n .IP "$row\->set($col, $val)" 4
.el .IP "\f(CW$row\fR\->set($col, \f(CW$val\fR)" 4
.IX Item "$row->set($col, $val)"
.Vb 1
\&    $row\->set($col => $val);
.Ve
.Sp
set column data.
.Sp
Note: This method deflates values.
.ie n .IP "$row\->get_column($column_name)" 4
.el .IP "\f(CW$row\fR\->get_column($column_name)" 4
.IX Item "$row->get_column($column_name)"
.Vb 1
\&    my $val = $row\->get_column($column_name);
.Ve
.Sp
get a column value from a row object.
.Sp
Note: This method does not inflate values.
.ie n .IP "$row\->get_columns" 4
.el .IP "\f(CW$row\fR\->get_columns" 4
.IX Item "$row->get_columns"
.Vb 1
\&    my $data = $row\->get_columns;
.Ve
.Sp
Does \f(CW\*(C`get_column\*(C'\fR, for all column values.
.Sp
Note: This method does not inflate values.
.ie n .IP "$row\->set_columns(\e%new_row_data)" 4
.el .IP "\f(CW$row\fR\->set_columns(\e%new_row_data)" 4
.IX Item "$row->set_columns(%new_row_data)"
.Vb 1
\&    $row\->set_columns({$col => $val});
.Ve
.Sp
set columns data.
.Sp
Note: This method does not deflate values.
.ie n .IP "$row\->set_column($col => $val)" 4
.el .IP "\f(CW$row\fR\->set_column($col => \f(CW$val\fR)" 4
.IX Item "$row->set_column($col => $val)"
.Vb 1
\&    $row\->set_column($col => $val);
\&
\&    # alias
\&    $row\->$col($val);
.Ve
.Sp
set column data.
.Sp
Note: This method does not deflate values.
.ie n .IP "$row\->get_dirty_columns" 4
.el .IP "\f(CW$row\fR\->get_dirty_columns" 4
.IX Item "$row->get_dirty_columns"
returns those that have been changed.
.ie n .IP "$row\->is_changed" 4
.el .IP "\f(CW$row\fR\->is_changed" 4
.IX Item "$row->is_changed"
returns true, If the row object have a updated column.
.ie n .IP "$row\->update([$arg])" 4
.el .IP "\f(CW$row\fR\->update([$arg])" 4
.IX Item "$row->update([$arg])"
update is executed for instance record.
.Sp
It works by schema in which primary key exists.
.Sp
.Vb 4
\&    $row\->update({name => \*(Aqtokuhirom\*(Aq});
\&    # or 
\&    $row\->set({name => \*(Aqtokuhirom\*(Aq});
\&    $row\->update;
.Ve
.Sp
If \f(CW$arg\fR HashRef is supplied, each pairs are passed to \f(CW\*(C`set()\*(C'\fR method before update.
.ie n .IP "$row\->delete" 4
.el .IP "\f(CW$row\fR\->delete" 4
.IX Item "$row->delete"
delete is executed for instance record.
.Sp
It works by schema in which primary key exists.
.ie n .IP "my $refetched_row = $row\->refetch;" 4
.el .IP "my \f(CW$refetched_row\fR = \f(CW$row\fR\->refetch;" 4
.IX Item "my $refetched_row = $row->refetch;"
refetch record from database. get new row object.
.ie n .IP "$row\->handle" 4
.el .IP "\f(CW$row\fR\->handle" 4
.IX Item "$row->handle"
get Teng object.
.Sp
.Vb 1
\&    $row\->handle\->single(\*(Aqtable\*(Aq, {id => 1});
.Ve
.SH "NOTE FOR COLUMN NAME METHOD"
.IX Header "NOTE FOR COLUMN NAME METHOD"
Teng::Row has methods that have name from column name. For example, if a table has column named 'foo', Teng::Row instance of it has method 'foo'.
.PP
This method has different behave for setter or getter as following:
.PP
.Vb 3
\&    # (getter) is alias of $row\->get(\*(Aqfoo\*(Aq)
\&    # so this method returns inflated value.
\&    my $inflated_value = $row\->foo;
\&
\&    # (setter) is alias of $row\->set_column(\*(Aqfoo\*(Aq, $raw_value)
\&    # so this method does not deflate the value. This only accepts raw value but inflated object.
\&    $row\->foo($raw_value);
.Ve
.PP
This behave is from historical reason. You should use column name methods with great caution, if you want to use this.
